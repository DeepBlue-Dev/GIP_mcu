
GIP_mcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000a54  00000ae8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800112  00800112  00000afa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e0e  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e0  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007bc  00000000  00000000  00002436  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079d  00000000  00000000  00002d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000269  00000000  00000000  000034fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003766  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_20>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	c0 00       	.word	0x00c0	; ????
  7e:	c7 00       	.word	0x00c7	; ????
  80:	ce 00       	.word	0x00ce	; ????
  82:	d5 00       	.word	0x00d5	; ????
  84:	df 00       	.word	0x00df	; ????
  86:	e9 00       	.word	0x00e9	; ????
  88:	f0 00       	.word	0x00f0	; ????
  8a:	f7 00       	.word	0x00f7	; ????
  8c:	fe 00       	.word	0x00fe	; ????
  8e:	05 01       	movw	r0, r10

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d8 e0       	ldi	r29, 0x08	; 8
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
  9c:	11 e0       	ldi	r17, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	e4 e5       	ldi	r30, 0x54	; 84
  a4:	fa e0       	ldi	r31, 0x0A	; 10
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 28 05 	jmp	0xa50	; 0xa50 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
	50,		//	dummy value	for remaining battery capacity
	0,		//	no charging current yet
};

int main(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	c0 54       	subi	r28, 0x40	; 64
  d8:	d1 09       	sbc	r29, r1
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
	RPI_usart_setup();	//	initalize UART0
  e4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <RPI_usart_setup>
	hall_timer_setup();	//	initialize timer
  e8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <hall_timer_setup>
	hall_ADC_setup();	//	initialize adc
  ec:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <hall_ADC_setup>
	DDRC = 0xFF;		//	portc all outputs
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	87 b9       	out	0x07, r24	; 7
	char buffer[64];	//	send buffer
	sei();				//	set Global Interrupt Enable '1'
  f4:	78 94       	sei

	while (1)
	{

	if(battery.AdcActivated && !(ADCSRA & (1 << ADSC))){	//	ADC has been activated, and is no longer active, so there is a result
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	82 ff       	sbrs	r24, 2
  fc:	31 c0       	rjmp	.+98     	; 0x160 <main+0x92>
  fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 102:	86 fd       	sbrc	r24, 6
 104:	2d c0       	rjmp	.+90     	; 0x160 <main+0x92>
		hall_interpret_result(&battery, hall_get_result());
 106:	0e 94 9d 01 	call	0x33a	; 0x33a <hall_get_result>
 10a:	bc 01       	movw	r22, r24
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 a6 01 	call	0x34c	; 0x34c <hall_interpret_result>
		sprintf(buffer, "%lu",battery.RemainingBatteryCapacity);
 114:	00 e0       	ldi	r16, 0x00	; 0
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	f8 01       	movw	r30, r16
 11a:	80 85       	ldd	r24, Z+8	; 0x08
 11c:	8f 93       	push	r24
 11e:	87 81       	ldd	r24, Z+7	; 0x07
 120:	8f 93       	push	r24
 122:	86 81       	ldd	r24, Z+6	; 0x06
 124:	8f 93       	push	r24
 126:	85 81       	ldd	r24, Z+5	; 0x05
 128:	8f 93       	push	r24
 12a:	8e e0       	ldi	r24, 0x0E	; 14
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	9f 93       	push	r25
 130:	8f 93       	push	r24
 132:	ce 01       	movw	r24, r28
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	7c 01       	movw	r14, r24
 138:	9f 93       	push	r25
 13a:	8f 93       	push	r24
 13c:	0e 94 3e 02 	call	0x47c	; 0x47c <sprintf>
		RPI_send_string(buffer);
 140:	c7 01       	movw	r24, r14
 142:	0e 94 1c 02 	call	0x438	; 0x438 <RPI_send_string>
		battery.AdcActivated = 0;
 146:	f8 01       	movw	r30, r16
 148:	80 81       	ld	r24, Z
 14a:	8b 7f       	andi	r24, 0xFB	; 251
 14c:	80 83       	st	Z, r24
		PORTC ^= (1 << PORTC6);
 14e:	98 b1       	in	r25, 0x08	; 8
 150:	80 e4       	ldi	r24, 0x40	; 64
 152:	89 27       	eor	r24, r25
 154:	88 b9       	out	0x08, r24	; 8
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	}

		if(resp_char != 255){	//	An instruction arrived
 160:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <resp_char>
 164:	ef 3f       	cpi	r30, 0xFF	; 255
 166:	39 f2       	breq	.-114    	; 0xf6 <main+0x28>
			switch(resp_char){
 168:	8e 2f       	mov	r24, r30
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	ea 30       	cpi	r30, 0x0A	; 10
 172:	f1 05       	cpc	r31, r1
 174:	08 f0       	brcs	.+2      	; 0x178 <main+0xaa>
 176:	6d c0       	rjmp	.+218    	; 0x252 <main+0x184>
 178:	e2 5c       	subi	r30, 0xC2	; 194
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	0c 94 38 02 	jmp	0x470	; 0x470 <__tablejump2__>
				case CreateConnection:
				RPI_send_char((char)CreatedConnection);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				resp_char = 255;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
				break;
 18c:	b4 cf       	rjmp	.-152    	; 0xf6 <main+0x28>
				case CloseConnection:
				RPI_send_char((char)ClosedConnection);
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				resp_char = 255;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
				break;
 19a:	ad cf       	rjmp	.-166    	; 0xf6 <main+0x28>
				case SendDataFromMemory:
				RPI_send_char((char)SendingMemData);
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				resp_char = 255;
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
				break;
 1a8:	a6 cf       	rjmp	.-180    	; 0xf6 <main+0x28>
				case UnlockHandbrake:
				PORTC &= ~(1 << HANDBRAKE);
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	8f 77       	andi	r24, 0x7F	; 127
 1ae:	88 b9       	out	0x08, r24	; 8
				RPI_send_char((char)HandbrakeUnlocked);
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				resp_char = 255;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
				break;
 1bc:	9c cf       	rjmp	.-200    	; 0xf6 <main+0x28>
				case LockHandbrake:
				PORTC |= (1 << HANDBRAKE);
 1be:	88 b1       	in	r24, 0x08	; 8
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	88 b9       	out	0x08, r24	; 8
				RPI_send_char((char)HandbrakeLocked);
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				resp_char = 255;
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
				break;
 1d0:	92 cf       	rjmp	.-220    	; 0xf6 <main+0x28>
				case StartCalibration:
				RPI_send_char((char)CalibrationStarted);
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				resp_char = 255;
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
				break;
 1de:	8b cf       	rjmp	.-234    	; 0xf6 <main+0x28>
				case StopCalibration:
				RPI_send_char((char)CalibrationStopped);
 1e0:	87 e0       	ldi	r24, 0x07	; 7
 1e2:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				resp_char = 255;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
				break;
 1ec:	84 cf       	rjmp	.-248    	; 0xf6 <main+0x28>
				case GetCalibrationResult:
				RPI_send_char((char)SendingCalibrationResult);
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				resp_char = 255;
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
				break;
 1fa:	7d cf       	rjmp	.-262    	; 0xf6 <main+0x28>
				case GetTotalCapacity:
				RPI_send_char((char)SendingTotalCapacity);
 1fc:	89 e0       	ldi	r24, 0x09	; 9
 1fe:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				resp_char = 255;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
				break;
 208:	76 cf       	rjmp	.-276    	; 0xf6 <main+0x28>
				case GetRemainingBatteryCharge:
				RPI_send_char((char)SendingRemainingBatteryCharge);
 20a:	8b e0       	ldi	r24, 0x0B	; 11
 20c:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				sprintf(buffer, "%lu",battery.RemainingBatteryCapacity);
 210:	e0 e0       	ldi	r30, 0x00	; 0
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	80 85       	ldd	r24, Z+8	; 0x08
 216:	8f 93       	push	r24
 218:	87 81       	ldd	r24, Z+7	; 0x07
 21a:	8f 93       	push	r24
 21c:	86 81       	ldd	r24, Z+6	; 0x06
 21e:	8f 93       	push	r24
 220:	85 81       	ldd	r24, Z+5	; 0x05
 222:	8f 93       	push	r24
 224:	8e e0       	ldi	r24, 0x0E	; 14
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	9f 93       	push	r25
 22a:	8f 93       	push	r24
 22c:	8e 01       	movw	r16, r28
 22e:	0f 5f       	subi	r16, 0xFF	; 255
 230:	1f 4f       	sbci	r17, 0xFF	; 255
 232:	1f 93       	push	r17
 234:	0f 93       	push	r16
 236:	0e 94 3e 02 	call	0x47c	; 0x47c <sprintf>
				RPI_send_string(buffer);
 23a:	c8 01       	movw	r24, r16
 23c:	0e 94 1c 02 	call	0x438	; 0x438 <RPI_send_string>
				resp_char = 255;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
				break;
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	52 cf       	rjmp	.-348    	; 0xf6 <main+0x28>
				default:
				RPI_send_char((char)Nop);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
				resp_char = 255;
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
 25e:	4b cf       	rjmp	.-362    	; 0xf6 <main+0x28>

00000260 <__vector_20>:
			
	}
	return 1;
}

ISR(USART0_RX_vect){
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	8f 93       	push	r24
	resp_char = UDR0;
 26c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 270:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
}
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <__vector_16>:

ISR(TIMER0_COMPA_vect){
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	8f 93       	push	r24
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	static unsigned char cntr = 0;	//	counter that will be used to count the number of times we passed 25ms

	if(cntr < 20){
 290:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 294:	84 31       	cpi	r24, 0x14	; 20
 296:	20 f4       	brcc	.+8      	; 0x2a0 <__vector_16+0x20>
		cntr++;
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 29e:	0c c0       	rjmp	.+24     	; 0x2b8 <__vector_16+0x38>
		
	} else {
		cntr = 0;
 2a0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
		ADCSRA |= (1 << ADSC);	//	activate ADC
 2a4:	ea e7       	ldi	r30, 0x7A	; 122
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	80 83       	st	Z, r24
		battery.AdcActivated = 1;
 2ae:	e0 e0       	ldi	r30, 0x00	; 0
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	80 81       	ld	r24, Z
 2b4:	84 60       	ori	r24, 0x04	; 4
 2b6:	80 83       	st	Z, r24
	}

	
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	8f 91       	pop	r24
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <hall_timer_setup>:
uint16_t hall_get_current(void){
	ADCSRA |= (1 << ADSC);
	while((ADCSRA & (1 << ADSC)));
	
	return hall_get_result();
}
 2c8:	84 b5       	in	r24, 0x24	; 36
 2ca:	8e 7f       	andi	r24, 0xFE	; 254
 2cc:	84 bd       	out	0x24, r24	; 36
 2ce:	85 b5       	in	r24, 0x25	; 37
 2d0:	87 7f       	andi	r24, 0xF7	; 247
 2d2:	85 bd       	out	0x25, r24	; 37
 2d4:	84 b5       	in	r24, 0x24	; 36
 2d6:	82 60       	ori	r24, 0x02	; 2
 2d8:	84 bd       	out	0x24, r24	; 36
 2da:	85 b5       	in	r24, 0x25	; 37
 2dc:	8d 7f       	andi	r24, 0xFD	; 253
 2de:	85 bd       	out	0x25, r24	; 37
 2e0:	85 b5       	in	r24, 0x25	; 37
 2e2:	85 60       	ori	r24, 0x05	; 5
 2e4:	85 bd       	out	0x25, r24	; 37
 2e6:	ee e6       	ldi	r30, 0x6E	; 110
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	80 83       	st	Z, r24
 2f0:	89 e5       	ldi	r24, 0x59	; 89
 2f2:	87 bd       	out	0x27, r24	; 39
 2f4:	08 95       	ret

000002f6 <hall_ADC_setup>:
 2f6:	ec e7       	ldi	r30, 0x7C	; 124
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	8f 77       	andi	r24, 0x7F	; 127
 2fe:	80 83       	st	Z, r24
 300:	80 81       	ld	r24, Z
 302:	80 64       	ori	r24, 0x40	; 64
 304:	80 83       	st	Z, r24
 306:	80 81       	ld	r24, Z
 308:	8f 7d       	andi	r24, 0xDF	; 223
 30a:	80 83       	st	Z, r24
 30c:	80 81       	ld	r24, Z
 30e:	80 7e       	andi	r24, 0xE0	; 224
 310:	80 83       	st	Z, r24
 312:	ea e7       	ldi	r30, 0x7A	; 122
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	85 60       	ori	r24, 0x05	; 5
 31a:	80 83       	st	Z, r24
 31c:	80 81       	ld	r24, Z
 31e:	8d 7f       	andi	r24, 0xFD	; 253
 320:	80 83       	st	Z, r24
 322:	80 81       	ld	r24, Z
 324:	8f 7d       	andi	r24, 0xDF	; 223
 326:	80 83       	st	Z, r24
 328:	ae e7       	ldi	r26, 0x7E	; 126
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	8c 91       	ld	r24, X
 32e:	81 60       	ori	r24, 0x01	; 1
 330:	8c 93       	st	X, r24
 332:	80 81       	ld	r24, Z
 334:	80 68       	ori	r24, 0x80	; 128
 336:	80 83       	st	Z, r24
 338:	08 95       	ret

0000033a <hall_get_result>:
 33a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	98 2f       	mov	r25, r24
 342:	88 27       	eor	r24, r24
 344:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 348:	82 2b       	or	r24, r18
 34a:	08 95       	ret

0000034c <hall_interpret_result>:

void hall_interpret_result(Battery *p_battery, uint16_t result){
 34c:	fc 01       	movw	r30, r24
	
	if(result < 512){	//	if true: the battery is charging
 34e:	61 15       	cp	r22, r1
 350:	22 e0       	ldi	r18, 0x02	; 2
 352:	72 07       	cpc	r23, r18
 354:	b8 f4       	brcc	.+46     	; 0x384 <hall_interpret_result+0x38>
		if(! p_battery->IsCharging){
 356:	80 81       	ld	r24, Z
 358:	81 fd       	sbrc	r24, 1
 35a:	07 c0       	rjmp	.+14     	; 0x36a <hall_interpret_result+0x1e>
			p_battery->IsCharging = 1;	//	battery is charging
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	80 83       	st	Z, r24
			p_battery->ChargeCurrent = 0;	//	reset the current that went into the battery
 360:	11 86       	std	Z+9, r1	; 0x09
 362:	12 86       	std	Z+10, r1	; 0x0a
 364:	13 86       	std	Z+11, r1	; 0x0b
 366:	14 86       	std	Z+12, r1	; 0x0c
 368:	08 95       	ret
			
		} else {
			if(p_battery->ChargeCurrent + result < 18446744073709551615ul)
				p_battery->ChargeCurrent += result;
 36a:	81 85       	ldd	r24, Z+9	; 0x09
 36c:	92 85       	ldd	r25, Z+10	; 0x0a
 36e:	a3 85       	ldd	r26, Z+11	; 0x0b
 370:	b4 85       	ldd	r27, Z+12	; 0x0c
 372:	86 0f       	add	r24, r22
 374:	97 1f       	adc	r25, r23
 376:	a1 1d       	adc	r26, r1
 378:	b1 1d       	adc	r27, r1
 37a:	81 87       	std	Z+9, r24	; 0x09
 37c:	92 87       	std	Z+10, r25	; 0x0a
 37e:	a3 87       	std	Z+11, r26	; 0x0b
 380:	b4 87       	std	Z+12, r27	; 0x0c
 382:	08 95       	ret
		}
	} else {
		if(p_battery->IsCharging){
 384:	80 81       	ld	r24, Z
 386:	81 ff       	sbrs	r24, 1
 388:	0f c0       	rjmp	.+30     	; 0x3a8 <hall_interpret_result+0x5c>
			p_battery->IsCharging = 0;
 38a:	8d 7f       	andi	r24, 0xFD	; 253
 38c:	80 83       	st	Z, r24
			p_battery->RemainingBatteryCapacity = p_battery->ChargeCurrent;
 38e:	81 85       	ldd	r24, Z+9	; 0x09
 390:	92 85       	ldd	r25, Z+10	; 0x0a
 392:	a3 85       	ldd	r26, Z+11	; 0x0b
 394:	b4 85       	ldd	r27, Z+12	; 0x0c
 396:	85 83       	std	Z+5, r24	; 0x05
 398:	96 83       	std	Z+6, r25	; 0x06
 39a:	a7 83       	std	Z+7, r26	; 0x07
 39c:	b0 87       	std	Z+8, r27	; 0x08
			p_battery->ChargeCurrent = 0;
 39e:	11 86       	std	Z+9, r1	; 0x09
 3a0:	12 86       	std	Z+10, r1	; 0x0a
 3a2:	13 86       	std	Z+11, r1	; 0x0b
 3a4:	14 86       	std	Z+12, r1	; 0x0c
 3a6:	08 95       	ret
		} else {
			if(p_battery->RemainingBatteryCapacity > 1024){
 3a8:	85 81       	ldd	r24, Z+5	; 0x05
 3aa:	96 81       	ldd	r25, Z+6	; 0x06
 3ac:	a7 81       	ldd	r26, Z+7	; 0x07
 3ae:	b0 85       	ldd	r27, Z+8	; 0x08
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	24 e0       	ldi	r18, 0x04	; 4
 3b4:	92 07       	cpc	r25, r18
 3b6:	a1 05       	cpc	r26, r1
 3b8:	b1 05       	cpc	r27, r1
 3ba:	40 f0       	brcs	.+16     	; 0x3cc <hall_interpret_result+0x80>
				p_battery->RemainingBatteryCapacity -= result;
 3bc:	86 1b       	sub	r24, r22
 3be:	97 0b       	sbc	r25, r23
 3c0:	a1 09       	sbc	r26, r1
 3c2:	b1 09       	sbc	r27, r1
 3c4:	85 83       	std	Z+5, r24	; 0x05
 3c6:	96 83       	std	Z+6, r25	; 0x06
 3c8:	a7 83       	std	Z+7, r26	; 0x07
 3ca:	b0 87       	std	Z+8, r27	; 0x08
 3cc:	08 95       	ret

000003ce <RPI_usart_setup>:
//	setup for USART
//	8 bit frames, 9600 Baud, 1 stop bit, no flow control,interrupts enabled
void RPI_usart_setup(void){
	
	//	set RX(PD0) as input, TX(PD1) as output and high
	DDRD &= ~(1 << DDRD0);
 3ce:	8a b1       	in	r24, 0x0a	; 10
 3d0:	8e 7f       	andi	r24, 0xFE	; 254
 3d2:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDRD1);
 3d4:	8a b1       	in	r24, 0x0a	; 10
 3d6:	82 60       	ori	r24, 0x02	; 2
 3d8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD1);
 3da:	8b b1       	in	r24, 0x0b	; 11
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	8b b9       	out	0x0b, r24	; 11
	//	normal speed
	UCSR0A &= ~(1 << U2X0);
 3e0:	e0 ec       	ldi	r30, 0xC0	; 192
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	8d 7f       	andi	r24, 0xFD	; 253
 3e8:	80 83       	st	Z, r24
	//	set baud rate to 9600 (23 for the register)
	UBRR0 = 23;
 3ea:	87 e1       	ldi	r24, 0x17	; 23
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//	mode select: asynchronous USART
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
 3f6:	e2 ec       	ldi	r30, 0xC2	; 194
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	8f 73       	andi	r24, 0x3F	; 63
 3fe:	80 83       	st	Z, r24
	//	No parity
	UCSR0C &= ~((1 << UPM00) | (1 << UPM01));
 400:	80 81       	ld	r24, Z
 402:	8f 7c       	andi	r24, 0xCF	; 207
 404:	80 83       	st	Z, r24
	//	1 stop bit
	UCSR0C &= ~(1 << USBS0);
 406:	80 81       	ld	r24, Z
 408:	87 7f       	andi	r24, 0xF7	; 247
 40a:	80 83       	st	Z, r24
	//	8 databits
	UCSR0B &= ~(1 << UCSZ02);
 40c:	a1 ec       	ldi	r26, 0xC1	; 193
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	8c 91       	ld	r24, X
 412:	8b 7f       	andi	r24, 0xFB	; 251
 414:	8c 93       	st	X, r24
	UCSR0C |=((1 << UCSZ00) | (1 << UCSZ01));
 416:	80 81       	ld	r24, Z
 418:	86 60       	ori	r24, 0x06	; 6
 41a:	80 83       	st	Z, r24
	//	we want to trigger an interrupt when the receive buffer is full
	UCSR0B |= (1 << RXCIE0);
 41c:	8c 91       	ld	r24, X
 41e:	80 68       	ori	r24, 0x80	; 128
 420:	8c 93       	st	X, r24
	//	enable receive and transmit port
	UCSR0B |= ((1 << RXEN0) | (1 << TXEN0));
 422:	8c 91       	ld	r24, X
 424:	88 61       	ori	r24, 0x18	; 24
 426:	8c 93       	st	X, r24
 428:	08 95       	ret

0000042a <RPI_send_char>:
}

//	send a single char to the rpi
void RPI_send_char(char msg){
	while(!(UCSR0A & (1 << UDRE0)));
 42a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 42e:	95 ff       	sbrs	r25, 5
 430:	fc cf       	rjmp	.-8      	; 0x42a <RPI_send_char>
	UDR0 = msg;
 432:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 436:	08 95       	ret

00000438 <RPI_send_string>:
}

//	send a string to the rpi
void RPI_send_string(char msg[]){
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	8c 01       	movw	r16, r24
	//	variable to loop over the character array
	uint16_t index = 0;
 442:	c0 e0       	ldi	r28, 0x00	; 0
 444:	d0 e0       	ldi	r29, 0x00	; 0
	while(index < 64){
 446:	0c c0       	rjmp	.+24     	; 0x460 <RPI_send_string+0x28>
		//	reached end of the string
		if(msg[index] == '\0'){
 448:	f8 01       	movw	r30, r16
 44a:	ec 0f       	add	r30, r28
 44c:	fd 1f       	adc	r31, r29
 44e:	80 81       	ld	r24, Z
 450:	81 11       	cpse	r24, r1
 452:	03 c0       	rjmp	.+6      	; 0x45a <RPI_send_string+0x22>
			RPI_send_char(msg[index]);
 454:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
			return;
 458:	06 c0       	rjmp	.+12     	; 0x466 <RPI_send_string+0x2e>
		}
		
		RPI_send_char(msg[index]);
 45a:	0e 94 15 02 	call	0x42a	; 0x42a <RPI_send_char>
		index++;
 45e:	21 96       	adiw	r28, 0x01	; 1

//	send a string to the rpi
void RPI_send_string(char msg[]){
	//	variable to loop over the character array
	uint16_t index = 0;
	while(index < 64){
 460:	c0 34       	cpi	r28, 0x40	; 64
 462:	d1 05       	cpc	r29, r1
 464:	88 f3       	brcs	.-30     	; 0x448 <RPI_send_string+0x10>
		}
		
		RPI_send_char(msg[index]);
		index++;
	}
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <__tablejump2__>:
 470:	ee 0f       	add	r30, r30
 472:	ff 1f       	adc	r31, r31
 474:	05 90       	lpm	r0, Z+
 476:	f4 91       	lpm	r31, Z
 478:	e0 2d       	mov	r30, r0
 47a:	09 94       	ijmp

0000047c <sprintf>:
 47c:	ae e0       	ldi	r26, 0x0E	; 14
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	e4 e4       	ldi	r30, 0x44	; 68
 482:	f2 e0       	ldi	r31, 0x02	; 2
 484:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__prologue_saves__+0x1c>
 488:	0d 89       	ldd	r16, Y+21	; 0x15
 48a:	1e 89       	ldd	r17, Y+22	; 0x16
 48c:	86 e0       	ldi	r24, 0x06	; 6
 48e:	8c 83       	std	Y+4, r24	; 0x04
 490:	1a 83       	std	Y+2, r17	; 0x02
 492:	09 83       	std	Y+1, r16	; 0x01
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	9f e7       	ldi	r25, 0x7F	; 127
 498:	9e 83       	std	Y+6, r25	; 0x06
 49a:	8d 83       	std	Y+5, r24	; 0x05
 49c:	ae 01       	movw	r20, r28
 49e:	47 5e       	subi	r20, 0xE7	; 231
 4a0:	5f 4f       	sbci	r21, 0xFF	; 255
 4a2:	6f 89       	ldd	r22, Y+23	; 0x17
 4a4:	78 8d       	ldd	r23, Y+24	; 0x18
 4a6:	ce 01       	movw	r24, r28
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vfprintf>
 4ae:	ef 81       	ldd	r30, Y+7	; 0x07
 4b0:	f8 85       	ldd	r31, Y+8	; 0x08
 4b2:	e0 0f       	add	r30, r16
 4b4:	f1 1f       	adc	r31, r17
 4b6:	10 82       	st	Z, r1
 4b8:	2e 96       	adiw	r28, 0x0e	; 14
 4ba:	e4 e0       	ldi	r30, 0x04	; 4
 4bc:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__epilogue_restores__+0x1c>

000004c0 <vfprintf>:
 4c0:	ab e0       	ldi	r26, 0x0B	; 11
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	e6 e6       	ldi	r30, 0x66	; 102
 4c6:	f2 e0       	ldi	r31, 0x02	; 2
 4c8:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__prologue_saves__>
 4cc:	6c 01       	movw	r12, r24
 4ce:	7b 01       	movw	r14, r22
 4d0:	8a 01       	movw	r16, r20
 4d2:	fc 01       	movw	r30, r24
 4d4:	17 82       	std	Z+7, r1	; 0x07
 4d6:	16 82       	std	Z+6, r1	; 0x06
 4d8:	83 81       	ldd	r24, Z+3	; 0x03
 4da:	81 ff       	sbrs	r24, 1
 4dc:	cc c1       	rjmp	.+920    	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 4de:	ce 01       	movw	r24, r28
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	3c 01       	movw	r6, r24
 4e4:	f6 01       	movw	r30, r12
 4e6:	93 81       	ldd	r25, Z+3	; 0x03
 4e8:	f7 01       	movw	r30, r14
 4ea:	93 fd       	sbrc	r25, 3
 4ec:	85 91       	lpm	r24, Z+
 4ee:	93 ff       	sbrs	r25, 3
 4f0:	81 91       	ld	r24, Z+
 4f2:	7f 01       	movw	r14, r30
 4f4:	88 23       	and	r24, r24
 4f6:	09 f4       	brne	.+2      	; 0x4fa <vfprintf+0x3a>
 4f8:	ba c1       	rjmp	.+884    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 4fa:	85 32       	cpi	r24, 0x25	; 37
 4fc:	39 f4       	brne	.+14     	; 0x50c <vfprintf+0x4c>
 4fe:	93 fd       	sbrc	r25, 3
 500:	85 91       	lpm	r24, Z+
 502:	93 ff       	sbrs	r25, 3
 504:	81 91       	ld	r24, Z+
 506:	7f 01       	movw	r14, r30
 508:	85 32       	cpi	r24, 0x25	; 37
 50a:	29 f4       	brne	.+10     	; 0x516 <vfprintf+0x56>
 50c:	b6 01       	movw	r22, r12
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 57 04 	call	0x8ae	; 0x8ae <fputc>
 514:	e7 cf       	rjmp	.-50     	; 0x4e4 <vfprintf+0x24>
 516:	91 2c       	mov	r9, r1
 518:	21 2c       	mov	r2, r1
 51a:	31 2c       	mov	r3, r1
 51c:	ff e1       	ldi	r31, 0x1F	; 31
 51e:	f3 15       	cp	r31, r3
 520:	d8 f0       	brcs	.+54     	; 0x558 <vfprintf+0x98>
 522:	8b 32       	cpi	r24, 0x2B	; 43
 524:	79 f0       	breq	.+30     	; 0x544 <vfprintf+0x84>
 526:	38 f4       	brcc	.+14     	; 0x536 <vfprintf+0x76>
 528:	80 32       	cpi	r24, 0x20	; 32
 52a:	79 f0       	breq	.+30     	; 0x54a <vfprintf+0x8a>
 52c:	83 32       	cpi	r24, 0x23	; 35
 52e:	a1 f4       	brne	.+40     	; 0x558 <vfprintf+0x98>
 530:	23 2d       	mov	r18, r3
 532:	20 61       	ori	r18, 0x10	; 16
 534:	1d c0       	rjmp	.+58     	; 0x570 <vfprintf+0xb0>
 536:	8d 32       	cpi	r24, 0x2D	; 45
 538:	61 f0       	breq	.+24     	; 0x552 <vfprintf+0x92>
 53a:	80 33       	cpi	r24, 0x30	; 48
 53c:	69 f4       	brne	.+26     	; 0x558 <vfprintf+0x98>
 53e:	23 2d       	mov	r18, r3
 540:	21 60       	ori	r18, 0x01	; 1
 542:	16 c0       	rjmp	.+44     	; 0x570 <vfprintf+0xb0>
 544:	83 2d       	mov	r24, r3
 546:	82 60       	ori	r24, 0x02	; 2
 548:	38 2e       	mov	r3, r24
 54a:	e3 2d       	mov	r30, r3
 54c:	e4 60       	ori	r30, 0x04	; 4
 54e:	3e 2e       	mov	r3, r30
 550:	2a c0       	rjmp	.+84     	; 0x5a6 <vfprintf+0xe6>
 552:	f3 2d       	mov	r31, r3
 554:	f8 60       	ori	r31, 0x08	; 8
 556:	1d c0       	rjmp	.+58     	; 0x592 <vfprintf+0xd2>
 558:	37 fc       	sbrc	r3, 7
 55a:	2d c0       	rjmp	.+90     	; 0x5b6 <vfprintf+0xf6>
 55c:	20 ed       	ldi	r18, 0xD0	; 208
 55e:	28 0f       	add	r18, r24
 560:	2a 30       	cpi	r18, 0x0A	; 10
 562:	40 f0       	brcs	.+16     	; 0x574 <vfprintf+0xb4>
 564:	8e 32       	cpi	r24, 0x2E	; 46
 566:	b9 f4       	brne	.+46     	; 0x596 <vfprintf+0xd6>
 568:	36 fc       	sbrc	r3, 6
 56a:	81 c1       	rjmp	.+770    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 56c:	23 2d       	mov	r18, r3
 56e:	20 64       	ori	r18, 0x40	; 64
 570:	32 2e       	mov	r3, r18
 572:	19 c0       	rjmp	.+50     	; 0x5a6 <vfprintf+0xe6>
 574:	36 fe       	sbrs	r3, 6
 576:	06 c0       	rjmp	.+12     	; 0x584 <vfprintf+0xc4>
 578:	8a e0       	ldi	r24, 0x0A	; 10
 57a:	98 9e       	mul	r9, r24
 57c:	20 0d       	add	r18, r0
 57e:	11 24       	eor	r1, r1
 580:	92 2e       	mov	r9, r18
 582:	11 c0       	rjmp	.+34     	; 0x5a6 <vfprintf+0xe6>
 584:	ea e0       	ldi	r30, 0x0A	; 10
 586:	2e 9e       	mul	r2, r30
 588:	20 0d       	add	r18, r0
 58a:	11 24       	eor	r1, r1
 58c:	22 2e       	mov	r2, r18
 58e:	f3 2d       	mov	r31, r3
 590:	f0 62       	ori	r31, 0x20	; 32
 592:	3f 2e       	mov	r3, r31
 594:	08 c0       	rjmp	.+16     	; 0x5a6 <vfprintf+0xe6>
 596:	8c 36       	cpi	r24, 0x6C	; 108
 598:	21 f4       	brne	.+8      	; 0x5a2 <vfprintf+0xe2>
 59a:	83 2d       	mov	r24, r3
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	38 2e       	mov	r3, r24
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <vfprintf+0xe6>
 5a2:	88 36       	cpi	r24, 0x68	; 104
 5a4:	41 f4       	brne	.+16     	; 0x5b6 <vfprintf+0xf6>
 5a6:	f7 01       	movw	r30, r14
 5a8:	93 fd       	sbrc	r25, 3
 5aa:	85 91       	lpm	r24, Z+
 5ac:	93 ff       	sbrs	r25, 3
 5ae:	81 91       	ld	r24, Z+
 5b0:	7f 01       	movw	r14, r30
 5b2:	81 11       	cpse	r24, r1
 5b4:	b3 cf       	rjmp	.-154    	; 0x51c <vfprintf+0x5c>
 5b6:	98 2f       	mov	r25, r24
 5b8:	9f 7d       	andi	r25, 0xDF	; 223
 5ba:	95 54       	subi	r25, 0x45	; 69
 5bc:	93 30       	cpi	r25, 0x03	; 3
 5be:	28 f4       	brcc	.+10     	; 0x5ca <vfprintf+0x10a>
 5c0:	0c 5f       	subi	r16, 0xFC	; 252
 5c2:	1f 4f       	sbci	r17, 0xFF	; 255
 5c4:	9f e3       	ldi	r25, 0x3F	; 63
 5c6:	99 83       	std	Y+1, r25	; 0x01
 5c8:	0d c0       	rjmp	.+26     	; 0x5e4 <vfprintf+0x124>
 5ca:	83 36       	cpi	r24, 0x63	; 99
 5cc:	31 f0       	breq	.+12     	; 0x5da <vfprintf+0x11a>
 5ce:	83 37       	cpi	r24, 0x73	; 115
 5d0:	71 f0       	breq	.+28     	; 0x5ee <vfprintf+0x12e>
 5d2:	83 35       	cpi	r24, 0x53	; 83
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <vfprintf+0x118>
 5d6:	59 c0       	rjmp	.+178    	; 0x68a <vfprintf+0x1ca>
 5d8:	21 c0       	rjmp	.+66     	; 0x61c <vfprintf+0x15c>
 5da:	f8 01       	movw	r30, r16
 5dc:	80 81       	ld	r24, Z
 5de:	89 83       	std	Y+1, r24	; 0x01
 5e0:	0e 5f       	subi	r16, 0xFE	; 254
 5e2:	1f 4f       	sbci	r17, 0xFF	; 255
 5e4:	88 24       	eor	r8, r8
 5e6:	83 94       	inc	r8
 5e8:	91 2c       	mov	r9, r1
 5ea:	53 01       	movw	r10, r6
 5ec:	13 c0       	rjmp	.+38     	; 0x614 <vfprintf+0x154>
 5ee:	28 01       	movw	r4, r16
 5f0:	f2 e0       	ldi	r31, 0x02	; 2
 5f2:	4f 0e       	add	r4, r31
 5f4:	51 1c       	adc	r5, r1
 5f6:	f8 01       	movw	r30, r16
 5f8:	a0 80       	ld	r10, Z
 5fa:	b1 80       	ldd	r11, Z+1	; 0x01
 5fc:	36 fe       	sbrs	r3, 6
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <vfprintf+0x146>
 600:	69 2d       	mov	r22, r9
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <vfprintf+0x14a>
 606:	6f ef       	ldi	r22, 0xFF	; 255
 608:	7f ef       	ldi	r23, 0xFF	; 255
 60a:	c5 01       	movw	r24, r10
 60c:	0e 94 4c 04 	call	0x898	; 0x898 <strnlen>
 610:	4c 01       	movw	r8, r24
 612:	82 01       	movw	r16, r4
 614:	f3 2d       	mov	r31, r3
 616:	ff 77       	andi	r31, 0x7F	; 127
 618:	3f 2e       	mov	r3, r31
 61a:	16 c0       	rjmp	.+44     	; 0x648 <vfprintf+0x188>
 61c:	28 01       	movw	r4, r16
 61e:	22 e0       	ldi	r18, 0x02	; 2
 620:	42 0e       	add	r4, r18
 622:	51 1c       	adc	r5, r1
 624:	f8 01       	movw	r30, r16
 626:	a0 80       	ld	r10, Z
 628:	b1 80       	ldd	r11, Z+1	; 0x01
 62a:	36 fe       	sbrs	r3, 6
 62c:	03 c0       	rjmp	.+6      	; 0x634 <vfprintf+0x174>
 62e:	69 2d       	mov	r22, r9
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <vfprintf+0x178>
 634:	6f ef       	ldi	r22, 0xFF	; 255
 636:	7f ef       	ldi	r23, 0xFF	; 255
 638:	c5 01       	movw	r24, r10
 63a:	0e 94 41 04 	call	0x882	; 0x882 <strnlen_P>
 63e:	4c 01       	movw	r8, r24
 640:	f3 2d       	mov	r31, r3
 642:	f0 68       	ori	r31, 0x80	; 128
 644:	3f 2e       	mov	r3, r31
 646:	82 01       	movw	r16, r4
 648:	33 fc       	sbrc	r3, 3
 64a:	1b c0       	rjmp	.+54     	; 0x682 <vfprintf+0x1c2>
 64c:	82 2d       	mov	r24, r2
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	88 16       	cp	r8, r24
 652:	99 06       	cpc	r9, r25
 654:	b0 f4       	brcc	.+44     	; 0x682 <vfprintf+0x1c2>
 656:	b6 01       	movw	r22, r12
 658:	80 e2       	ldi	r24, 0x20	; 32
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 57 04 	call	0x8ae	; 0x8ae <fputc>
 660:	2a 94       	dec	r2
 662:	f4 cf       	rjmp	.-24     	; 0x64c <vfprintf+0x18c>
 664:	f5 01       	movw	r30, r10
 666:	37 fc       	sbrc	r3, 7
 668:	85 91       	lpm	r24, Z+
 66a:	37 fe       	sbrs	r3, 7
 66c:	81 91       	ld	r24, Z+
 66e:	5f 01       	movw	r10, r30
 670:	b6 01       	movw	r22, r12
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 57 04 	call	0x8ae	; 0x8ae <fputc>
 678:	21 10       	cpse	r2, r1
 67a:	2a 94       	dec	r2
 67c:	21 e0       	ldi	r18, 0x01	; 1
 67e:	82 1a       	sub	r8, r18
 680:	91 08       	sbc	r9, r1
 682:	81 14       	cp	r8, r1
 684:	91 04       	cpc	r9, r1
 686:	71 f7       	brne	.-36     	; 0x664 <vfprintf+0x1a4>
 688:	e8 c0       	rjmp	.+464    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 68a:	84 36       	cpi	r24, 0x64	; 100
 68c:	11 f0       	breq	.+4      	; 0x692 <vfprintf+0x1d2>
 68e:	89 36       	cpi	r24, 0x69	; 105
 690:	41 f5       	brne	.+80     	; 0x6e2 <vfprintf+0x222>
 692:	f8 01       	movw	r30, r16
 694:	37 fe       	sbrs	r3, 7
 696:	07 c0       	rjmp	.+14     	; 0x6a6 <vfprintf+0x1e6>
 698:	60 81       	ld	r22, Z
 69a:	71 81       	ldd	r23, Z+1	; 0x01
 69c:	82 81       	ldd	r24, Z+2	; 0x02
 69e:	93 81       	ldd	r25, Z+3	; 0x03
 6a0:	0c 5f       	subi	r16, 0xFC	; 252
 6a2:	1f 4f       	sbci	r17, 0xFF	; 255
 6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <vfprintf+0x1f6>
 6a6:	60 81       	ld	r22, Z
 6a8:	71 81       	ldd	r23, Z+1	; 0x01
 6aa:	07 2e       	mov	r0, r23
 6ac:	00 0c       	add	r0, r0
 6ae:	88 0b       	sbc	r24, r24
 6b0:	99 0b       	sbc	r25, r25
 6b2:	0e 5f       	subi	r16, 0xFE	; 254
 6b4:	1f 4f       	sbci	r17, 0xFF	; 255
 6b6:	f3 2d       	mov	r31, r3
 6b8:	ff 76       	andi	r31, 0x6F	; 111
 6ba:	3f 2e       	mov	r3, r31
 6bc:	97 ff       	sbrs	r25, 7
 6be:	09 c0       	rjmp	.+18     	; 0x6d2 <vfprintf+0x212>
 6c0:	90 95       	com	r25
 6c2:	80 95       	com	r24
 6c4:	70 95       	com	r23
 6c6:	61 95       	neg	r22
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ca:	8f 4f       	sbci	r24, 0xFF	; 255
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	f0 68       	ori	r31, 0x80	; 128
 6d0:	3f 2e       	mov	r3, r31
 6d2:	2a e0       	ldi	r18, 0x0A	; 10
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	a3 01       	movw	r20, r6
 6d8:	0e 94 93 04 	call	0x926	; 0x926 <__ultoa_invert>
 6dc:	88 2e       	mov	r8, r24
 6de:	86 18       	sub	r8, r6
 6e0:	45 c0       	rjmp	.+138    	; 0x76c <vfprintf+0x2ac>
 6e2:	85 37       	cpi	r24, 0x75	; 117
 6e4:	31 f4       	brne	.+12     	; 0x6f2 <vfprintf+0x232>
 6e6:	23 2d       	mov	r18, r3
 6e8:	2f 7e       	andi	r18, 0xEF	; 239
 6ea:	b2 2e       	mov	r11, r18
 6ec:	2a e0       	ldi	r18, 0x0A	; 10
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	25 c0       	rjmp	.+74     	; 0x73c <vfprintf+0x27c>
 6f2:	93 2d       	mov	r25, r3
 6f4:	99 7f       	andi	r25, 0xF9	; 249
 6f6:	b9 2e       	mov	r11, r25
 6f8:	8f 36       	cpi	r24, 0x6F	; 111
 6fa:	c1 f0       	breq	.+48     	; 0x72c <vfprintf+0x26c>
 6fc:	18 f4       	brcc	.+6      	; 0x704 <vfprintf+0x244>
 6fe:	88 35       	cpi	r24, 0x58	; 88
 700:	79 f0       	breq	.+30     	; 0x720 <vfprintf+0x260>
 702:	b5 c0       	rjmp	.+362    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 704:	80 37       	cpi	r24, 0x70	; 112
 706:	19 f0       	breq	.+6      	; 0x70e <vfprintf+0x24e>
 708:	88 37       	cpi	r24, 0x78	; 120
 70a:	21 f0       	breq	.+8      	; 0x714 <vfprintf+0x254>
 70c:	b0 c0       	rjmp	.+352    	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 70e:	e9 2f       	mov	r30, r25
 710:	e0 61       	ori	r30, 0x10	; 16
 712:	be 2e       	mov	r11, r30
 714:	b4 fe       	sbrs	r11, 4
 716:	0d c0       	rjmp	.+26     	; 0x732 <vfprintf+0x272>
 718:	fb 2d       	mov	r31, r11
 71a:	f4 60       	ori	r31, 0x04	; 4
 71c:	bf 2e       	mov	r11, r31
 71e:	09 c0       	rjmp	.+18     	; 0x732 <vfprintf+0x272>
 720:	34 fe       	sbrs	r3, 4
 722:	0a c0       	rjmp	.+20     	; 0x738 <vfprintf+0x278>
 724:	29 2f       	mov	r18, r25
 726:	26 60       	ori	r18, 0x06	; 6
 728:	b2 2e       	mov	r11, r18
 72a:	06 c0       	rjmp	.+12     	; 0x738 <vfprintf+0x278>
 72c:	28 e0       	ldi	r18, 0x08	; 8
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	05 c0       	rjmp	.+10     	; 0x73c <vfprintf+0x27c>
 732:	20 e1       	ldi	r18, 0x10	; 16
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <vfprintf+0x27c>
 738:	20 e1       	ldi	r18, 0x10	; 16
 73a:	32 e0       	ldi	r19, 0x02	; 2
 73c:	f8 01       	movw	r30, r16
 73e:	b7 fe       	sbrs	r11, 7
 740:	07 c0       	rjmp	.+14     	; 0x750 <vfprintf+0x290>
 742:	60 81       	ld	r22, Z
 744:	71 81       	ldd	r23, Z+1	; 0x01
 746:	82 81       	ldd	r24, Z+2	; 0x02
 748:	93 81       	ldd	r25, Z+3	; 0x03
 74a:	0c 5f       	subi	r16, 0xFC	; 252
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	06 c0       	rjmp	.+12     	; 0x75c <vfprintf+0x29c>
 750:	60 81       	ld	r22, Z
 752:	71 81       	ldd	r23, Z+1	; 0x01
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 5f       	subi	r16, 0xFE	; 254
 75a:	1f 4f       	sbci	r17, 0xFF	; 255
 75c:	a3 01       	movw	r20, r6
 75e:	0e 94 93 04 	call	0x926	; 0x926 <__ultoa_invert>
 762:	88 2e       	mov	r8, r24
 764:	86 18       	sub	r8, r6
 766:	fb 2d       	mov	r31, r11
 768:	ff 77       	andi	r31, 0x7F	; 127
 76a:	3f 2e       	mov	r3, r31
 76c:	36 fe       	sbrs	r3, 6
 76e:	0d c0       	rjmp	.+26     	; 0x78a <vfprintf+0x2ca>
 770:	23 2d       	mov	r18, r3
 772:	2e 7f       	andi	r18, 0xFE	; 254
 774:	a2 2e       	mov	r10, r18
 776:	89 14       	cp	r8, r9
 778:	58 f4       	brcc	.+22     	; 0x790 <vfprintf+0x2d0>
 77a:	34 fe       	sbrs	r3, 4
 77c:	0b c0       	rjmp	.+22     	; 0x794 <vfprintf+0x2d4>
 77e:	32 fc       	sbrc	r3, 2
 780:	09 c0       	rjmp	.+18     	; 0x794 <vfprintf+0x2d4>
 782:	83 2d       	mov	r24, r3
 784:	8e 7e       	andi	r24, 0xEE	; 238
 786:	a8 2e       	mov	r10, r24
 788:	05 c0       	rjmp	.+10     	; 0x794 <vfprintf+0x2d4>
 78a:	b8 2c       	mov	r11, r8
 78c:	a3 2c       	mov	r10, r3
 78e:	03 c0       	rjmp	.+6      	; 0x796 <vfprintf+0x2d6>
 790:	b8 2c       	mov	r11, r8
 792:	01 c0       	rjmp	.+2      	; 0x796 <vfprintf+0x2d6>
 794:	b9 2c       	mov	r11, r9
 796:	a4 fe       	sbrs	r10, 4
 798:	0f c0       	rjmp	.+30     	; 0x7b8 <vfprintf+0x2f8>
 79a:	fe 01       	movw	r30, r28
 79c:	e8 0d       	add	r30, r8
 79e:	f1 1d       	adc	r31, r1
 7a0:	80 81       	ld	r24, Z
 7a2:	80 33       	cpi	r24, 0x30	; 48
 7a4:	21 f4       	brne	.+8      	; 0x7ae <vfprintf+0x2ee>
 7a6:	9a 2d       	mov	r25, r10
 7a8:	99 7e       	andi	r25, 0xE9	; 233
 7aa:	a9 2e       	mov	r10, r25
 7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <vfprintf+0x300>
 7ae:	a2 fe       	sbrs	r10, 2
 7b0:	06 c0       	rjmp	.+12     	; 0x7be <vfprintf+0x2fe>
 7b2:	b3 94       	inc	r11
 7b4:	b3 94       	inc	r11
 7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <vfprintf+0x300>
 7b8:	8a 2d       	mov	r24, r10
 7ba:	86 78       	andi	r24, 0x86	; 134
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <vfprintf+0x300>
 7be:	b3 94       	inc	r11
 7c0:	a3 fc       	sbrc	r10, 3
 7c2:	11 c0       	rjmp	.+34     	; 0x7e6 <vfprintf+0x326>
 7c4:	a0 fe       	sbrs	r10, 0
 7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <vfprintf+0x314>
 7c8:	b2 14       	cp	r11, r2
 7ca:	88 f4       	brcc	.+34     	; 0x7ee <vfprintf+0x32e>
 7cc:	28 0c       	add	r2, r8
 7ce:	92 2c       	mov	r9, r2
 7d0:	9b 18       	sub	r9, r11
 7d2:	0e c0       	rjmp	.+28     	; 0x7f0 <vfprintf+0x330>
 7d4:	b2 14       	cp	r11, r2
 7d6:	60 f4       	brcc	.+24     	; 0x7f0 <vfprintf+0x330>
 7d8:	b6 01       	movw	r22, r12
 7da:	80 e2       	ldi	r24, 0x20	; 32
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 57 04 	call	0x8ae	; 0x8ae <fputc>
 7e2:	b3 94       	inc	r11
 7e4:	f7 cf       	rjmp	.-18     	; 0x7d4 <vfprintf+0x314>
 7e6:	b2 14       	cp	r11, r2
 7e8:	18 f4       	brcc	.+6      	; 0x7f0 <vfprintf+0x330>
 7ea:	2b 18       	sub	r2, r11
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <vfprintf+0x332>
 7ee:	98 2c       	mov	r9, r8
 7f0:	21 2c       	mov	r2, r1
 7f2:	a4 fe       	sbrs	r10, 4
 7f4:	10 c0       	rjmp	.+32     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7f6:	b6 01       	movw	r22, r12
 7f8:	80 e3       	ldi	r24, 0x30	; 48
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 57 04 	call	0x8ae	; 0x8ae <fputc>
 800:	a2 fe       	sbrs	r10, 2
 802:	17 c0       	rjmp	.+46     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 804:	a1 fc       	sbrc	r10, 1
 806:	03 c0       	rjmp	.+6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 808:	88 e7       	ldi	r24, 0x78	; 120
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	88 e5       	ldi	r24, 0x58	; 88
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	b6 01       	movw	r22, r12
 814:	0c c0       	rjmp	.+24     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 816:	8a 2d       	mov	r24, r10
 818:	86 78       	andi	r24, 0x86	; 134
 81a:	59 f0       	breq	.+22     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 81c:	a1 fe       	sbrs	r10, 1
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	8b e2       	ldi	r24, 0x2B	; 43
 822:	01 c0       	rjmp	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 824:	80 e2       	ldi	r24, 0x20	; 32
 826:	a7 fc       	sbrc	r10, 7
 828:	8d e2       	ldi	r24, 0x2D	; 45
 82a:	b6 01       	movw	r22, r12
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 57 04 	call	0x8ae	; 0x8ae <fputc>
 832:	89 14       	cp	r8, r9
 834:	38 f4       	brcc	.+14     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 836:	b6 01       	movw	r22, r12
 838:	80 e3       	ldi	r24, 0x30	; 48
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 57 04 	call	0x8ae	; 0x8ae <fputc>
 840:	9a 94       	dec	r9
 842:	f7 cf       	rjmp	.-18     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 844:	8a 94       	dec	r8
 846:	f3 01       	movw	r30, r6
 848:	e8 0d       	add	r30, r8
 84a:	f1 1d       	adc	r31, r1
 84c:	80 81       	ld	r24, Z
 84e:	b6 01       	movw	r22, r12
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 57 04 	call	0x8ae	; 0x8ae <fputc>
 856:	81 10       	cpse	r8, r1
 858:	f5 cf       	rjmp	.-22     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 85a:	22 20       	and	r2, r2
 85c:	09 f4       	brne	.+2      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 85e:	42 ce       	rjmp	.-892    	; 0x4e4 <vfprintf+0x24>
 860:	b6 01       	movw	r22, r12
 862:	80 e2       	ldi	r24, 0x20	; 32
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	0e 94 57 04 	call	0x8ae	; 0x8ae <fputc>
 86a:	2a 94       	dec	r2
 86c:	f6 cf       	rjmp	.-20     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 86e:	f6 01       	movw	r30, r12
 870:	86 81       	ldd	r24, Z+6	; 0x06
 872:	97 81       	ldd	r25, Z+7	; 0x07
 874:	02 c0       	rjmp	.+4      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 876:	8f ef       	ldi	r24, 0xFF	; 255
 878:	9f ef       	ldi	r25, 0xFF	; 255
 87a:	2b 96       	adiw	r28, 0x0b	; 11
 87c:	e2 e1       	ldi	r30, 0x12	; 18
 87e:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__epilogue_restores__>

00000882 <strnlen_P>:
 882:	fc 01       	movw	r30, r24
 884:	05 90       	lpm	r0, Z+
 886:	61 50       	subi	r22, 0x01	; 1
 888:	70 40       	sbci	r23, 0x00	; 0
 88a:	01 10       	cpse	r0, r1
 88c:	d8 f7       	brcc	.-10     	; 0x884 <strnlen_P+0x2>
 88e:	80 95       	com	r24
 890:	90 95       	com	r25
 892:	8e 0f       	add	r24, r30
 894:	9f 1f       	adc	r25, r31
 896:	08 95       	ret

00000898 <strnlen>:
 898:	fc 01       	movw	r30, r24
 89a:	61 50       	subi	r22, 0x01	; 1
 89c:	70 40       	sbci	r23, 0x00	; 0
 89e:	01 90       	ld	r0, Z+
 8a0:	01 10       	cpse	r0, r1
 8a2:	d8 f7       	brcc	.-10     	; 0x89a <strnlen+0x2>
 8a4:	80 95       	com	r24
 8a6:	90 95       	com	r25
 8a8:	8e 0f       	add	r24, r30
 8aa:	9f 1f       	adc	r25, r31
 8ac:	08 95       	ret

000008ae <fputc>:
 8ae:	0f 93       	push	r16
 8b0:	1f 93       	push	r17
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	fb 01       	movw	r30, r22
 8b8:	23 81       	ldd	r18, Z+3	; 0x03
 8ba:	21 fd       	sbrc	r18, 1
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <fputc+0x16>
 8be:	8f ef       	ldi	r24, 0xFF	; 255
 8c0:	9f ef       	ldi	r25, 0xFF	; 255
 8c2:	2c c0       	rjmp	.+88     	; 0x91c <__stack+0x1d>
 8c4:	22 ff       	sbrs	r18, 2
 8c6:	16 c0       	rjmp	.+44     	; 0x8f4 <fputc+0x46>
 8c8:	46 81       	ldd	r20, Z+6	; 0x06
 8ca:	57 81       	ldd	r21, Z+7	; 0x07
 8cc:	24 81       	ldd	r18, Z+4	; 0x04
 8ce:	35 81       	ldd	r19, Z+5	; 0x05
 8d0:	42 17       	cp	r20, r18
 8d2:	53 07       	cpc	r21, r19
 8d4:	44 f4       	brge	.+16     	; 0x8e6 <fputc+0x38>
 8d6:	a0 81       	ld	r26, Z
 8d8:	b1 81       	ldd	r27, Z+1	; 0x01
 8da:	9d 01       	movw	r18, r26
 8dc:	2f 5f       	subi	r18, 0xFF	; 255
 8de:	3f 4f       	sbci	r19, 0xFF	; 255
 8e0:	31 83       	std	Z+1, r19	; 0x01
 8e2:	20 83       	st	Z, r18
 8e4:	8c 93       	st	X, r24
 8e6:	26 81       	ldd	r18, Z+6	; 0x06
 8e8:	37 81       	ldd	r19, Z+7	; 0x07
 8ea:	2f 5f       	subi	r18, 0xFF	; 255
 8ec:	3f 4f       	sbci	r19, 0xFF	; 255
 8ee:	37 83       	std	Z+7, r19	; 0x07
 8f0:	26 83       	std	Z+6, r18	; 0x06
 8f2:	14 c0       	rjmp	.+40     	; 0x91c <__stack+0x1d>
 8f4:	8b 01       	movw	r16, r22
 8f6:	ec 01       	movw	r28, r24
 8f8:	fb 01       	movw	r30, r22
 8fa:	00 84       	ldd	r0, Z+8	; 0x08
 8fc:	f1 85       	ldd	r31, Z+9	; 0x09
 8fe:	e0 2d       	mov	r30, r0
 900:	09 95       	icall
 902:	89 2b       	or	r24, r25
 904:	e1 f6       	brne	.-72     	; 0x8be <fputc+0x10>
 906:	d8 01       	movw	r26, r16
 908:	16 96       	adiw	r26, 0x06	; 6
 90a:	8d 91       	ld	r24, X+
 90c:	9c 91       	ld	r25, X
 90e:	17 97       	sbiw	r26, 0x07	; 7
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	17 96       	adiw	r26, 0x07	; 7
 914:	9c 93       	st	X, r25
 916:	8e 93       	st	-X, r24
 918:	16 97       	sbiw	r26, 0x06	; 6
 91a:	ce 01       	movw	r24, r28
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	1f 91       	pop	r17
 922:	0f 91       	pop	r16
 924:	08 95       	ret

00000926 <__ultoa_invert>:
 926:	fa 01       	movw	r30, r20
 928:	aa 27       	eor	r26, r26
 92a:	28 30       	cpi	r18, 0x08	; 8
 92c:	51 f1       	breq	.+84     	; 0x982 <__ultoa_invert+0x5c>
 92e:	20 31       	cpi	r18, 0x10	; 16
 930:	81 f1       	breq	.+96     	; 0x992 <__ultoa_invert+0x6c>
 932:	e8 94       	clt
 934:	6f 93       	push	r22
 936:	6e 7f       	andi	r22, 0xFE	; 254
 938:	6e 5f       	subi	r22, 0xFE	; 254
 93a:	7f 4f       	sbci	r23, 0xFF	; 255
 93c:	8f 4f       	sbci	r24, 0xFF	; 255
 93e:	9f 4f       	sbci	r25, 0xFF	; 255
 940:	af 4f       	sbci	r26, 0xFF	; 255
 942:	b1 e0       	ldi	r27, 0x01	; 1
 944:	3e d0       	rcall	.+124    	; 0x9c2 <__ultoa_invert+0x9c>
 946:	b4 e0       	ldi	r27, 0x04	; 4
 948:	3c d0       	rcall	.+120    	; 0x9c2 <__ultoa_invert+0x9c>
 94a:	67 0f       	add	r22, r23
 94c:	78 1f       	adc	r23, r24
 94e:	89 1f       	adc	r24, r25
 950:	9a 1f       	adc	r25, r26
 952:	a1 1d       	adc	r26, r1
 954:	68 0f       	add	r22, r24
 956:	79 1f       	adc	r23, r25
 958:	8a 1f       	adc	r24, r26
 95a:	91 1d       	adc	r25, r1
 95c:	a1 1d       	adc	r26, r1
 95e:	6a 0f       	add	r22, r26
 960:	71 1d       	adc	r23, r1
 962:	81 1d       	adc	r24, r1
 964:	91 1d       	adc	r25, r1
 966:	a1 1d       	adc	r26, r1
 968:	20 d0       	rcall	.+64     	; 0x9aa <__ultoa_invert+0x84>
 96a:	09 f4       	brne	.+2      	; 0x96e <__ultoa_invert+0x48>
 96c:	68 94       	set
 96e:	3f 91       	pop	r19
 970:	2a e0       	ldi	r18, 0x0A	; 10
 972:	26 9f       	mul	r18, r22
 974:	11 24       	eor	r1, r1
 976:	30 19       	sub	r19, r0
 978:	30 5d       	subi	r19, 0xD0	; 208
 97a:	31 93       	st	Z+, r19
 97c:	de f6       	brtc	.-74     	; 0x934 <__ultoa_invert+0xe>
 97e:	cf 01       	movw	r24, r30
 980:	08 95       	ret
 982:	46 2f       	mov	r20, r22
 984:	47 70       	andi	r20, 0x07	; 7
 986:	40 5d       	subi	r20, 0xD0	; 208
 988:	41 93       	st	Z+, r20
 98a:	b3 e0       	ldi	r27, 0x03	; 3
 98c:	0f d0       	rcall	.+30     	; 0x9ac <__ultoa_invert+0x86>
 98e:	c9 f7       	brne	.-14     	; 0x982 <__ultoa_invert+0x5c>
 990:	f6 cf       	rjmp	.-20     	; 0x97e <__ultoa_invert+0x58>
 992:	46 2f       	mov	r20, r22
 994:	4f 70       	andi	r20, 0x0F	; 15
 996:	40 5d       	subi	r20, 0xD0	; 208
 998:	4a 33       	cpi	r20, 0x3A	; 58
 99a:	18 f0       	brcs	.+6      	; 0x9a2 <__ultoa_invert+0x7c>
 99c:	49 5d       	subi	r20, 0xD9	; 217
 99e:	31 fd       	sbrc	r19, 1
 9a0:	40 52       	subi	r20, 0x20	; 32
 9a2:	41 93       	st	Z+, r20
 9a4:	02 d0       	rcall	.+4      	; 0x9aa <__ultoa_invert+0x84>
 9a6:	a9 f7       	brne	.-22     	; 0x992 <__ultoa_invert+0x6c>
 9a8:	ea cf       	rjmp	.-44     	; 0x97e <__ultoa_invert+0x58>
 9aa:	b4 e0       	ldi	r27, 0x04	; 4
 9ac:	a6 95       	lsr	r26
 9ae:	97 95       	ror	r25
 9b0:	87 95       	ror	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	ba 95       	dec	r27
 9b8:	c9 f7       	brne	.-14     	; 0x9ac <__ultoa_invert+0x86>
 9ba:	00 97       	sbiw	r24, 0x00	; 0
 9bc:	61 05       	cpc	r22, r1
 9be:	71 05       	cpc	r23, r1
 9c0:	08 95       	ret
 9c2:	9b 01       	movw	r18, r22
 9c4:	ac 01       	movw	r20, r24
 9c6:	0a 2e       	mov	r0, r26
 9c8:	06 94       	lsr	r0
 9ca:	57 95       	ror	r21
 9cc:	47 95       	ror	r20
 9ce:	37 95       	ror	r19
 9d0:	27 95       	ror	r18
 9d2:	ba 95       	dec	r27
 9d4:	c9 f7       	brne	.-14     	; 0x9c8 <__ultoa_invert+0xa2>
 9d6:	62 0f       	add	r22, r18
 9d8:	73 1f       	adc	r23, r19
 9da:	84 1f       	adc	r24, r20
 9dc:	95 1f       	adc	r25, r21
 9de:	a0 1d       	adc	r26, r0
 9e0:	08 95       	ret

000009e2 <__prologue_saves__>:
 9e2:	2f 92       	push	r2
 9e4:	3f 92       	push	r3
 9e6:	4f 92       	push	r4
 9e8:	5f 92       	push	r5
 9ea:	6f 92       	push	r6
 9ec:	7f 92       	push	r7
 9ee:	8f 92       	push	r8
 9f0:	9f 92       	push	r9
 9f2:	af 92       	push	r10
 9f4:	bf 92       	push	r11
 9f6:	cf 92       	push	r12
 9f8:	df 92       	push	r13
 9fa:	ef 92       	push	r14
 9fc:	ff 92       	push	r15
 9fe:	0f 93       	push	r16
 a00:	1f 93       	push	r17
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
 a06:	cd b7       	in	r28, 0x3d	; 61
 a08:	de b7       	in	r29, 0x3e	; 62
 a0a:	ca 1b       	sub	r28, r26
 a0c:	db 0b       	sbc	r29, r27
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	f8 94       	cli
 a12:	de bf       	out	0x3e, r29	; 62
 a14:	0f be       	out	0x3f, r0	; 63
 a16:	cd bf       	out	0x3d, r28	; 61
 a18:	09 94       	ijmp

00000a1a <__epilogue_restores__>:
 a1a:	2a 88       	ldd	r2, Y+18	; 0x12
 a1c:	39 88       	ldd	r3, Y+17	; 0x11
 a1e:	48 88       	ldd	r4, Y+16	; 0x10
 a20:	5f 84       	ldd	r5, Y+15	; 0x0f
 a22:	6e 84       	ldd	r6, Y+14	; 0x0e
 a24:	7d 84       	ldd	r7, Y+13	; 0x0d
 a26:	8c 84       	ldd	r8, Y+12	; 0x0c
 a28:	9b 84       	ldd	r9, Y+11	; 0x0b
 a2a:	aa 84       	ldd	r10, Y+10	; 0x0a
 a2c:	b9 84       	ldd	r11, Y+9	; 0x09
 a2e:	c8 84       	ldd	r12, Y+8	; 0x08
 a30:	df 80       	ldd	r13, Y+7	; 0x07
 a32:	ee 80       	ldd	r14, Y+6	; 0x06
 a34:	fd 80       	ldd	r15, Y+5	; 0x05
 a36:	0c 81       	ldd	r16, Y+4	; 0x04
 a38:	1b 81       	ldd	r17, Y+3	; 0x03
 a3a:	aa 81       	ldd	r26, Y+2	; 0x02
 a3c:	b9 81       	ldd	r27, Y+1	; 0x01
 a3e:	ce 0f       	add	r28, r30
 a40:	d1 1d       	adc	r29, r1
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	f8 94       	cli
 a46:	de bf       	out	0x3e, r29	; 62
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	cd bf       	out	0x3d, r28	; 61
 a4c:	ed 01       	movw	r28, r26
 a4e:	08 95       	ret

00000a50 <_exit>:
 a50:	f8 94       	cli

00000a52 <__stop_program>:
 a52:	ff cf       	rjmp	.-2      	; 0xa52 <__stop_program>
