
GIP_mcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000284  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000baf  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e4  00000000  00000000  00000fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067c  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ce  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000183  00000000  00000000  000026da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000285d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 e8       	ldi	r30, 0x84	; 132
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 30       	cpi	r26, 0x02	; 2
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
enum InstructionCodes ICodes;
enum ResponseCodes RCodes;

int main(void)
{
	RPI_usart_setup();
  ba:	0e 94 0b 01 	call	0x216	; 0x216 <RPI_usart_setup>
	hall_ADC_setup();
  be:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <hall_ADC_setup>
	DDRC = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	87 b9       	out	0x07, r24	; 7


	char buffer[16];	//	send buffer
	sei();
  c6:	78 94       	sei

	while (1)
	{
		switch(resp_char){
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	86 30       	cpi	r24, 0x06	; 6
  ce:	09 f4       	brne	.+2      	; 0xd2 <main+0x18>
  d0:	46 c0       	rjmp	.+140    	; 0x15e <main+0xa4>
  d2:	68 f4       	brcc	.+26     	; 0xee <main+0x34>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	41 f1       	breq	.+80     	; 0x128 <main+0x6e>
  d8:	28 f4       	brcc	.+10     	; 0xe4 <main+0x2a>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	b9 f0       	breq	.+46     	; 0x10c <main+0x52>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	e1 f0       	breq	.+56     	; 0x11a <main+0x60>
  e2:	60 c0       	rjmp	.+192    	; 0x1a4 <main+0xea>
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	39 f1       	breq	.+78     	; 0x136 <main+0x7c>
  e8:	85 30       	cpi	r24, 0x05	; 5
  ea:	79 f1       	breq	.+94     	; 0x14a <main+0x90>
  ec:	5b c0       	rjmp	.+182    	; 0x1a4 <main+0xea>
  ee:	89 30       	cpi	r24, 0x09	; 9
  f0:	09 f4       	brne	.+2      	; 0xf4 <main+0x3a>
  f2:	4a c0       	rjmp	.+148    	; 0x188 <main+0xce>
  f4:	28 f4       	brcc	.+10     	; 0x100 <main+0x46>
  f6:	87 30       	cpi	r24, 0x07	; 7
  f8:	c9 f1       	breq	.+114    	; 0x16c <main+0xb2>
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	f1 f1       	breq	.+124    	; 0x17a <main+0xc0>
  fe:	52 c0       	rjmp	.+164    	; 0x1a4 <main+0xea>
 100:	8a 30       	cpi	r24, 0x0A	; 10
 102:	09 f4       	brne	.+2      	; 0x106 <main+0x4c>
 104:	48 c0       	rjmp	.+144    	; 0x196 <main+0xdc>
 106:	8f 3f       	cpi	r24, 0xFF	; 255
 108:	f9 f2       	breq	.-66     	; 0xc8 <main+0xe>
 10a:	4c c0       	rjmp	.+152    	; 0x1a4 <main+0xea>
			case 255:
				break;
			case CreateConnection:
				RPI_send_char((char)CreatedConnection);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 118:	d7 cf       	rjmp	.-82     	; 0xc8 <main+0xe>
			case CloseConnection:
				RPI_send_char((char)ClosedConnection);
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 126:	d0 cf       	rjmp	.-96     	; 0xc8 <main+0xe>
			case SendDataFromMemory:
				RPI_send_char((char)SendingMemData);
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 134:	c9 cf       	rjmp	.-110    	; 0xc8 <main+0xe>
			case UnlockHandbrake:
				PORTC &= ~(1 << HANDBRAKE);
 136:	88 b1       	in	r24, 0x08	; 8
 138:	8f 77       	andi	r24, 0x7F	; 127
 13a:	88 b9       	out	0x08, r24	; 8
				RPI_send_char((char)HandbrakeUnlocked);
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 148:	bf cf       	rjmp	.-130    	; 0xc8 <main+0xe>
			case LockHandbrake:
				PORTC |= (1 << HANDBRAKE);
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	88 b9       	out	0x08, r24	; 8
				RPI_send_char((char)HandbrakeLocked);
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 15c:	b5 cf       	rjmp	.-150    	; 0xc8 <main+0xe>
			case StartCalibration:
				RPI_send_char((char)CalibrationStarted);
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 16a:	ae cf       	rjmp	.-164    	; 0xc8 <main+0xe>
			case StopCalibration:
				RPI_send_char((char)CalibrationStopped);
 16c:	87 e0       	ldi	r24, 0x07	; 7
 16e:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 178:	a7 cf       	rjmp	.-178    	; 0xc8 <main+0xe>
			case GetCalibrationResult:
				RPI_send_char((char)SendingCalibrationResult);
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 186:	a0 cf       	rjmp	.-192    	; 0xc8 <main+0xe>
			case GetTotalCapacity:
				RPI_send_char((char)SendingTotalCapacity);
 188:	89 e0       	ldi	r24, 0x09	; 9
 18a:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 194:	99 cf       	rjmp	.-206    	; 0xc8 <main+0xe>
			case GetRemainingBatteryCharge:
				RPI_send_char((char)SendingRemainingBatteryCharge);
 196:	8b e0       	ldi	r24, 0x0B	; 11
 198:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 1a2:	92 cf       	rjmp	.-220    	; 0xc8 <main+0xe>
			default:
				RPI_send_char((char)Nop);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 39 01 	call	0x272	; 0x272 <RPI_send_char>
				resp_char = 255;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b0:	8b cf       	rjmp	.-234    	; 0xc8 <main+0xe>

000001b2 <__vector_20>:
		
	}
	return 1;
}

ISR(USART0_RX_vect){
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 93       	push	r24
	resp_char = UDR0;
 1be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <hall_ADC_setup>:

//	setup for the ADC for the Hall Sensor
//	freerunning mode, no interrupts, ps: 32, ADC0, digital input disabled
void hall_ADC_setup(void){
	//	use AVCC external voltage (VCC will be attached to it)
	ADMUX &= ~((1 << REFS1));
 1d2:	ec e7       	ldi	r30, 0x7C	; 124
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	8f 77       	andi	r24, 0x7F	; 127
 1da:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);
 1dc:	80 81       	ld	r24, Z
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	80 83       	st	Z, r24
	//	right adjusted result, we will use the full 10-bits
	ADMUX &= ~(1 << ADLAR);
 1e2:	80 81       	ld	r24, Z
 1e4:	8f 7d       	andi	r24, 0xDF	; 223
 1e6:	80 83       	st	Z, r24
	//	use single ended input ADC0
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3) | (1 << MUX4));
 1e8:	80 81       	ld	r24, Z
 1ea:	80 7e       	andi	r24, 0xE0	; 224
 1ec:	80 83       	st	Z, r24
	//	Prescaler (32) for the speed of the conversion.
	ADCSRA |= ((1 << ADPS0) | (1 << ADPS2));
 1ee:	ea e7       	ldi	r30, 0x7A	; 122
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	85 60       	ori	r24, 0x05	; 5
 1f6:	80 83       	st	Z, r24
	ADCSRA &= ~(1 << ADPS1);
 1f8:	80 81       	ld	r24, Z
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	80 83       	st	Z, r24
	//	enable freerunning, we don't want auto triggers
	ADCSRA &= ~(1 << ADATE);
 1fe:	80 81       	ld	r24, Z
 200:	8f 7d       	andi	r24, 0xDF	; 223
 202:	80 83       	st	Z, r24
	//	disable the input buffer on the pin we want to use for ADC (pina0)
	DIDR0 |= (1 << ADC0D);
 204:	ae e7       	ldi	r26, 0x7E	; 126
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	8c 91       	ld	r24, X
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	8c 93       	st	X, r24
	//	enable adc
	ADCSRA |= (1 << ADEN);
 20e:	80 81       	ld	r24, Z
 210:	80 68       	ori	r24, 0x80	; 128
 212:	80 83       	st	Z, r24
 214:	08 95       	ret

00000216 <RPI_usart_setup>:
//	setup for USART
//	8 bit frames, 9600 Baud, 1 stop bit, no flow control,interrupts enabled
void RPI_usart_setup(void){
	
	//	set RX(PD0) as input, TX(PD1) as output and high
	DDRD &= ~(1 << DDRD0);
 216:	8a b1       	in	r24, 0x0a	; 10
 218:	8e 7f       	andi	r24, 0xFE	; 254
 21a:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDRD1);
 21c:	8a b1       	in	r24, 0x0a	; 10
 21e:	82 60       	ori	r24, 0x02	; 2
 220:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD1);
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	82 60       	ori	r24, 0x02	; 2
 226:	8b b9       	out	0x0b, r24	; 11
	//	normal speed
	UCSR0A &= ~(1 << U2X0);
 228:	e0 ec       	ldi	r30, 0xC0	; 192
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	8d 7f       	andi	r24, 0xFD	; 253
 230:	80 83       	st	Z, r24
	//	set baud rate to 9600 (23 for the register)
	UBRR0 = 23;
 232:	87 e1       	ldi	r24, 0x17	; 23
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 23a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//	mode select: asynchronous USART
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
 23e:	e2 ec       	ldi	r30, 0xC2	; 194
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	8f 73       	andi	r24, 0x3F	; 63
 246:	80 83       	st	Z, r24
	//	No parity
	UCSR0C &= ~((1 << UPM00) | (1 << UPM01));
 248:	80 81       	ld	r24, Z
 24a:	8f 7c       	andi	r24, 0xCF	; 207
 24c:	80 83       	st	Z, r24
	//	1 stop bit
	UCSR0C &= ~(1 << USBS0);
 24e:	80 81       	ld	r24, Z
 250:	87 7f       	andi	r24, 0xF7	; 247
 252:	80 83       	st	Z, r24
	//	8 databits
	UCSR0B &= ~(1 << UCSZ02);
 254:	a1 ec       	ldi	r26, 0xC1	; 193
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	8c 91       	ld	r24, X
 25a:	8b 7f       	andi	r24, 0xFB	; 251
 25c:	8c 93       	st	X, r24
	UCSR0C |=((1 << UCSZ00) | (1 << UCSZ01));
 25e:	80 81       	ld	r24, Z
 260:	86 60       	ori	r24, 0x06	; 6
 262:	80 83       	st	Z, r24
	//	we want to trigger an interrupt when the receive buffer is full
	UCSR0B |= (1 << RXCIE0);
 264:	8c 91       	ld	r24, X
 266:	80 68       	ori	r24, 0x80	; 128
 268:	8c 93       	st	X, r24
	//	enable receive and transmit port
	UCSR0B |= ((1 << RXEN0) | (1 << TXEN0));
 26a:	8c 91       	ld	r24, X
 26c:	88 61       	ori	r24, 0x18	; 24
 26e:	8c 93       	st	X, r24
 270:	08 95       	ret

00000272 <RPI_send_char>:
}

//	send a single char to the rpi
void RPI_send_char(char msg){
	while(!(UCSR0A & (1 << UDRE0)));
 272:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 276:	95 ff       	sbrs	r25, 5
 278:	fc cf       	rjmp	.-8      	; 0x272 <RPI_send_char>
	UDR0 = msg;
 27a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
