
GIP_mcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000486  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  00000528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eac  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a74  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079f  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ba  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000291  00000000  00000000  0000302e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000032bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_20>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	9b 00       	.word	0x009b	; ????
  7e:	a2 00       	.word	0x00a2	; ????
  80:	a9 00       	.word	0x00a9	; ????
  82:	b0 00       	.word	0x00b0	; ????
  84:	ba 00       	.word	0x00ba	; ????
  86:	c4 00       	.word	0x00c4	; ????
  88:	cb 00       	.word	0x00cb	; ????
  8a:	d2 00       	.word	0x00d2	; ????
  8c:	d9 00       	.word	0x00d9	; ????
  8e:	e0 00       	.word	0x00e0	; ????

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d8 e0       	ldi	r29, 0x08	; 8
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
  9c:	11 e0       	ldi	r17, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	e6 e8       	ldi	r30, 0x86	; 134
  a4:	f4 e0       	ldi	r31, 0x04	; 4
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 41 02 	jmp	0x482	; 0x482 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
	50,		//	dummy value	for remaining battery capacity
	0,		//	no charging current yet
};

int main(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	c0 54       	subi	r28, 0x40	; 64
  d8:	d1 09       	sbc	r29, r1
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
	RPI_usart_setup();	//	initalize UART0
  e4:	0e 94 b8 01 	call	0x370	; 0x370 <RPI_usart_setup>
	hall_timer_setup();	//	initialize timer
  e8:	0e 94 2f 01 	call	0x25e	; 0x25e <hall_timer_setup>
	hall_ADC_setup();	//	initialize adc
  ec:	0e 94 46 01 	call	0x28c	; 0x28c <hall_ADC_setup>
	DDRC = 0xFF;		//	portc all outputs
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	87 b9       	out	0x07, r24	; 7
	char buffer[64];	//	send buffer
	sei();				//	set Global Interrupt Enable '1'
  f4:	78 94       	sei

	while (1)
	{

	if(battery.AdcActivated){	//	ADC has been activated, and is no longer active, so there is a result
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	82 ff       	sbrs	r24, 2
  fc:	0c c0       	rjmp	.+24     	; 0x116 <main+0x48>
		hall_interpret_result(&battery,hall_get_current());
  fe:	0e 94 71 01 	call	0x2e2	; 0x2e2 <hall_get_current>
 102:	bc 01       	movw	r22, r24
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 7d 01 	call	0x2fa	; 0x2fa <hall_interpret_result>
		battery.AdcActivated = 0;
 10c:	e0 e0       	ldi	r30, 0x00	; 0
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	80 81       	ld	r24, Z
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	80 83       	st	Z, r24
	}

		if(resp_char != 255){	//	An instruction arrived
 116:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <resp_char>
 11a:	ef 3f       	cpi	r30, 0xFF	; 255
 11c:	61 f3       	breq	.-40     	; 0xf6 <main+0x28>
			switch(resp_char){
 11e:	8e 2f       	mov	r24, r30
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	ea 30       	cpi	r30, 0x0A	; 10
 128:	f1 05       	cpc	r31, r1
 12a:	08 f0       	brcs	.+2      	; 0x12e <main+0x60>
 12c:	62 c0       	rjmp	.+196    	; 0x1f2 <main+0x124>
 12e:	e2 5c       	subi	r30, 0xC2	; 194
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	0c 94 09 02 	jmp	0x412	; 0x412 <__tablejump2__>
				case CreateConnection:
					RPI_send_char((char)CreatedConnection);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					resp_char = 255;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
					break;
 142:	d9 cf       	rjmp	.-78     	; 0xf6 <main+0x28>
				case CloseConnection:
					RPI_send_char((char)ClosedConnection);
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					resp_char = 255;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
					break;
 150:	d2 cf       	rjmp	.-92     	; 0xf6 <main+0x28>
				case SendDataFromMemory:
					RPI_send_char((char)SendingMemData);
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					resp_char = 255;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
					break;
 15e:	cb cf       	rjmp	.-106    	; 0xf6 <main+0x28>
				case UnlockHandbrake:
					PORTC &= ~(1 << HANDBRAKE);
 160:	88 b1       	in	r24, 0x08	; 8
 162:	8f 77       	andi	r24, 0x7F	; 127
 164:	88 b9       	out	0x08, r24	; 8
					RPI_send_char((char)HandbrakeUnlocked);
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					resp_char = 255;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
					break;
 172:	c1 cf       	rjmp	.-126    	; 0xf6 <main+0x28>
				case LockHandbrake:
					PORTC |= (1 << HANDBRAKE);
 174:	88 b1       	in	r24, 0x08	; 8
 176:	80 68       	ori	r24, 0x80	; 128
 178:	88 b9       	out	0x08, r24	; 8
					RPI_send_char((char)HandbrakeLocked);
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					resp_char = 255;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
					break;
 186:	b7 cf       	rjmp	.-146    	; 0xf6 <main+0x28>
				case StartCalibration:
					RPI_send_char((char)CalibrationStarted);
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					resp_char = 255;
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
					break;
 194:	b0 cf       	rjmp	.-160    	; 0xf6 <main+0x28>
				case StopCalibration:
					RPI_send_char((char)CalibrationStopped);
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					resp_char = 255;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
					break;
 1a2:	a9 cf       	rjmp	.-174    	; 0xf6 <main+0x28>
				case GetCalibrationResult:
					RPI_send_char((char)SendingCalibrationResult);
 1a4:	88 e0       	ldi	r24, 0x08	; 8
 1a6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					resp_char = 255;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
					break;
 1b0:	a2 cf       	rjmp	.-188    	; 0xf6 <main+0x28>
				case GetTotalCapacity:
					RPI_send_char((char)SendingTotalCapacity);
 1b2:	89 e0       	ldi	r24, 0x09	; 9
 1b4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					resp_char = 255;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
					break;
 1be:	9b cf       	rjmp	.-202    	; 0xf6 <main+0x28>
				case GetRemainingBatteryCharge:
					RPI_send_char((char)SendingRemainingBatteryCharge);
 1c0:	8b e0       	ldi	r24, 0x0B	; 11
 1c2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					ultoa(battery.RemainingBatteryCapacity, buffer, 10);	//	convert the long to an ascii string
 1c6:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 1ca:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 1ce:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 1d2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 1d6:	2a e0       	ldi	r18, 0x0A	; 10
 1d8:	ae 01       	movw	r20, r28
 1da:	4f 5f       	subi	r20, 0xFF	; 255
 1dc:	5f 4f       	sbci	r21, 0xFF	; 255
 1de:	0e 94 0f 02 	call	0x41e	; 0x41e <__ultoa_ncheck>
					RPI_send_string(buffer);
 1e2:	ce 01       	movw	r24, r28
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	0e 94 ed 01 	call	0x3da	; 0x3da <RPI_send_string>
					resp_char = 255;
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
					break;
 1f0:	82 cf       	rjmp	.-252    	; 0xf6 <main+0x28>
				default:
					RPI_send_char((char)Nop);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
					resp_char = 255;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
 1fe:	7b cf       	rjmp	.-266    	; 0xf6 <main+0x28>

00000200 <__vector_20>:
		}					
	}
	return 1;
}

ISR(USART0_RX_vect){
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	8f 93       	push	r24
	resp_char = UDR0;
 20c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 210:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <resp_char>
}
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_16>:

ISR(TIMER0_COMPA_vect){
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	8f 93       	push	r24
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	static unsigned char cntr = 0;	//	counter that will be used to count the number of times we passed 25ms

	if(cntr < 20){
 230:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 234:	84 31       	cpi	r24, 0x14	; 20
 236:	20 f4       	brcc	.+8      	; 0x240 <__vector_16+0x20>
		cntr++;
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 23e:	07 c0       	rjmp	.+14     	; 0x24e <__vector_16+0x2e>
		
	} else {
		cntr = 0;
 240:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		battery.AdcActivated = 1;
 244:	e0 e0       	ldi	r30, 0x00	; 0
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	80 81       	ld	r24, Z
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	80 83       	st	Z, r24
	}

	
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <hall_timer_setup>:
#include "HallSensor.h"

//	uses timer0 to generate an interrupt every 25 ms
void hall_timer_setup(void){
	//	timer0 mode 2 (CTC)
	TCCR0A &= ~(1 << WGM00);
 25e:	84 b5       	in	r24, 0x24	; 36
 260:	8e 7f       	andi	r24, 0xFE	; 254
 262:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);
 264:	85 b5       	in	r24, 0x25	; 37
 266:	87 7f       	andi	r24, 0xF7	; 247
 268:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1 << WGM01);
 26a:	84 b5       	in	r24, 0x24	; 36
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	84 bd       	out	0x24, r24	; 36
	//	prescaler of 1024.
	TCCR0B &= ~(1 << CS01);
 270:	85 b5       	in	r24, 0x25	; 37
 272:	8d 7f       	andi	r24, 0xFD	; 253
 274:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= ((1 << CS00) | (1 << CS02));
 276:	85 b5       	in	r24, 0x25	; 37
 278:	85 60       	ori	r24, 0x05	; 5
 27a:	85 bd       	out	0x25, r24	; 37
	//	activate interrupt on compare match
	TIMSK0 |= (1 << OCIE0A);
 27c:	ee e6       	ldi	r30, 0x6E	; 110
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	82 60       	ori	r24, 0x02	; 2
 284:	80 83       	st	Z, r24
	//	set compare value ( (0.025s) / (1 / 3686400) = 92160 => 92160 / 1024 = 90 - 1 )
	OCR0A = 89;
 286:	89 e5       	ldi	r24, 0x59	; 89
 288:	87 bd       	out	0x27, r24	; 39
 28a:	08 95       	ret

0000028c <hall_ADC_setup>:

//	setup for the ADC for the Hall Sensor
//	freerunning mode, no interrupts, ps: 32, ADC0, digital input disabled
void hall_ADC_setup(void){
	//	use AVCC external voltage (VCC will be attached to it)
	ADMUX &= ~((1 << REFS1));
 28c:	ec e7       	ldi	r30, 0x7C	; 124
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	8f 77       	andi	r24, 0x7F	; 127
 294:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);
 296:	80 81       	ld	r24, Z
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	80 83       	st	Z, r24
	//	right adjusted result, we will use the full 10-bits
	ADMUX &= ~(1 << ADLAR);
 29c:	80 81       	ld	r24, Z
 29e:	8f 7d       	andi	r24, 0xDF	; 223
 2a0:	80 83       	st	Z, r24
	//	use single ended input ADC0
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3) | (1 << MUX4));
 2a2:	80 81       	ld	r24, Z
 2a4:	80 7e       	andi	r24, 0xE0	; 224
 2a6:	80 83       	st	Z, r24
	//	Prescaler (32) for the speed of the conversion.
	ADCSRA |= ((1 << ADPS0) | (1 << ADPS2));
 2a8:	ea e7       	ldi	r30, 0x7A	; 122
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	85 60       	ori	r24, 0x05	; 5
 2b0:	80 83       	st	Z, r24
	ADCSRA &= ~(1 << ADPS1);
 2b2:	80 81       	ld	r24, Z
 2b4:	8d 7f       	andi	r24, 0xFD	; 253
 2b6:	80 83       	st	Z, r24
	//	enable freerunning, we don't want auto triggers
	ADCSRA &= ~(1 << ADATE);
 2b8:	80 81       	ld	r24, Z
 2ba:	8f 7d       	andi	r24, 0xDF	; 223
 2bc:	80 83       	st	Z, r24
	//	disable the input buffer on the pin we want to use for ADC (pina0)
	DIDR0 |= (1 << ADC0D);
 2be:	ae e7       	ldi	r26, 0x7E	; 126
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	8c 91       	ld	r24, X
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	8c 93       	st	X, r24
	//	enable adc
	ADCSRA |= (1 << ADEN);
 2c8:	80 81       	ld	r24, Z
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	80 83       	st	Z, r24
 2ce:	08 95       	ret

000002d0 <hall_get_result>:
}

uint16_t hall_get_result(void){
	return ((((uint16_t)ADCH) << 8) | ADCL);
 2d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	98 2f       	mov	r25, r24
 2d8:	88 27       	eor	r24, r24
 2da:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
}
 2de:	82 2b       	or	r24, r18
 2e0:	08 95       	ret

000002e2 <hall_get_current>:

//	get the strength of the current.
uint16_t hall_get_current(void){
	ADCSRA |= (1 << ADSC);
 2e2:	ea e7       	ldi	r30, 0x7A	; 122
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	80 83       	st	Z, r24
	while((ADCSRA & (1 << ADSC)));
 2ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2f0:	86 fd       	sbrc	r24, 6
 2f2:	fc cf       	rjmp	.-8      	; 0x2ec <hall_get_current+0xa>
	
	return hall_get_result();
 2f4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <hall_get_result>
}
 2f8:	08 95       	ret

000002fa <hall_interpret_result>:

void hall_interpret_result(Battery *p_battery, uint16_t result){
 2fa:	fc 01       	movw	r30, r24
	
	if(result < 512){	//	if true: the battery is charging
 2fc:	61 15       	cp	r22, r1
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	78 07       	cpc	r23, r24
 302:	b8 f4       	brcc	.+46     	; 0x332 <hall_interpret_result+0x38>
		if(! p_battery->IsCharging){
 304:	80 81       	ld	r24, Z
 306:	81 fd       	sbrc	r24, 1
 308:	07 c0       	rjmp	.+14     	; 0x318 <hall_interpret_result+0x1e>
			p_battery->IsCharging = 1;	//	battery is charging
 30a:	82 60       	ori	r24, 0x02	; 2
 30c:	80 83       	st	Z, r24
			p_battery->ChargeCurrent = 0;	//	reset the current that went into the battery
 30e:	11 86       	std	Z+9, r1	; 0x09
 310:	12 86       	std	Z+10, r1	; 0x0a
 312:	13 86       	std	Z+11, r1	; 0x0b
 314:	14 86       	std	Z+12, r1	; 0x0c
 316:	08 95       	ret
			
		} else {
			if(p_battery->ChargeCurrent + result < 18446744073709551615ul)	//	overflow protectin
				p_battery->ChargeCurrent += result;
 318:	81 85       	ldd	r24, Z+9	; 0x09
 31a:	92 85       	ldd	r25, Z+10	; 0x0a
 31c:	a3 85       	ldd	r26, Z+11	; 0x0b
 31e:	b4 85       	ldd	r27, Z+12	; 0x0c
 320:	86 0f       	add	r24, r22
 322:	97 1f       	adc	r25, r23
 324:	a1 1d       	adc	r26, r1
 326:	b1 1d       	adc	r27, r1
 328:	81 87       	std	Z+9, r24	; 0x09
 32a:	92 87       	std	Z+10, r25	; 0x0a
 32c:	a3 87       	std	Z+11, r26	; 0x0b
 32e:	b4 87       	std	Z+12, r27	; 0x0c
 330:	08 95       	ret
		}
	} else {
		if(p_battery->IsCharging){
 332:	80 81       	ld	r24, Z
 334:	81 ff       	sbrs	r24, 1
 336:	0f c0       	rjmp	.+30     	; 0x356 <hall_interpret_result+0x5c>
			p_battery->IsCharging = 0;
 338:	8d 7f       	andi	r24, 0xFD	; 253
 33a:	80 83       	st	Z, r24
			p_battery->RemainingBatteryCapacity = p_battery->ChargeCurrent;
 33c:	81 85       	ldd	r24, Z+9	; 0x09
 33e:	92 85       	ldd	r25, Z+10	; 0x0a
 340:	a3 85       	ldd	r26, Z+11	; 0x0b
 342:	b4 85       	ldd	r27, Z+12	; 0x0c
 344:	85 83       	std	Z+5, r24	; 0x05
 346:	96 83       	std	Z+6, r25	; 0x06
 348:	a7 83       	std	Z+7, r26	; 0x07
 34a:	b0 87       	std	Z+8, r27	; 0x08
			p_battery->ChargeCurrent = 0;
 34c:	11 86       	std	Z+9, r1	; 0x09
 34e:	12 86       	std	Z+10, r1	; 0x0a
 350:	13 86       	std	Z+11, r1	; 0x0b
 352:	14 86       	std	Z+12, r1	; 0x0c
 354:	08 95       	ret
		} else {
			if(p_battery->RemainingBatteryCapacity - result >= 0){	
				p_battery->RemainingBatteryCapacity -= result;
 356:	85 81       	ldd	r24, Z+5	; 0x05
 358:	96 81       	ldd	r25, Z+6	; 0x06
 35a:	a7 81       	ldd	r26, Z+7	; 0x07
 35c:	b0 85       	ldd	r27, Z+8	; 0x08
 35e:	86 1b       	sub	r24, r22
 360:	97 0b       	sbc	r25, r23
 362:	a1 09       	sbc	r26, r1
 364:	b1 09       	sbc	r27, r1
 366:	85 83       	std	Z+5, r24	; 0x05
 368:	96 83       	std	Z+6, r25	; 0x06
 36a:	a7 83       	std	Z+7, r26	; 0x07
 36c:	b0 87       	std	Z+8, r27	; 0x08
 36e:	08 95       	ret

00000370 <RPI_usart_setup>:
//	setup for USART
//	8 bit frames, 9600 Baud, 1 stop bit, no flow control,interrupts enabled
void RPI_usart_setup(void){
	
	//	set RX(PD0) as input, TX(PD1) as output and high
	DDRD &= ~(1 << DDRD0);
 370:	8a b1       	in	r24, 0x0a	; 10
 372:	8e 7f       	andi	r24, 0xFE	; 254
 374:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDRD1);
 376:	8a b1       	in	r24, 0x0a	; 10
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD1);
 37c:	8b b1       	in	r24, 0x0b	; 11
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	8b b9       	out	0x0b, r24	; 11
	//	normal speed
	UCSR0A &= ~(1 << U2X0);
 382:	e0 ec       	ldi	r30, 0xC0	; 192
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	8d 7f       	andi	r24, 0xFD	; 253
 38a:	80 83       	st	Z, r24
	//	set baud rate to 9600 (23 for the register)
	UBRR0 = 23;
 38c:	87 e1       	ldi	r24, 0x17	; 23
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 394:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//	mode select: asynchronous USART
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01));
 398:	e2 ec       	ldi	r30, 0xC2	; 194
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	8f 73       	andi	r24, 0x3F	; 63
 3a0:	80 83       	st	Z, r24
	//	No parity
	UCSR0C &= ~((1 << UPM00) | (1 << UPM01));
 3a2:	80 81       	ld	r24, Z
 3a4:	8f 7c       	andi	r24, 0xCF	; 207
 3a6:	80 83       	st	Z, r24
	//	1 stop bit
	UCSR0C &= ~(1 << USBS0);
 3a8:	80 81       	ld	r24, Z
 3aa:	87 7f       	andi	r24, 0xF7	; 247
 3ac:	80 83       	st	Z, r24
	//	8 databits
	UCSR0B &= ~(1 << UCSZ02);
 3ae:	a1 ec       	ldi	r26, 0xC1	; 193
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	8c 91       	ld	r24, X
 3b4:	8b 7f       	andi	r24, 0xFB	; 251
 3b6:	8c 93       	st	X, r24
	UCSR0C |=((1 << UCSZ00) | (1 << UCSZ01));
 3b8:	80 81       	ld	r24, Z
 3ba:	86 60       	ori	r24, 0x06	; 6
 3bc:	80 83       	st	Z, r24
	//	we want to trigger an interrupt when the receive buffer is full
	UCSR0B |= (1 << RXCIE0);
 3be:	8c 91       	ld	r24, X
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	8c 93       	st	X, r24
	//	enable receive and transmit port
	UCSR0B |= ((1 << RXEN0) | (1 << TXEN0));
 3c4:	8c 91       	ld	r24, X
 3c6:	88 61       	ori	r24, 0x18	; 24
 3c8:	8c 93       	st	X, r24
 3ca:	08 95       	ret

000003cc <RPI_send_char>:
}

//	send a single char to the rpi
void RPI_send_char(char msg){
	while(!(UCSR0A & (1 << UDRE0)));
 3cc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3d0:	95 ff       	sbrs	r25, 5
 3d2:	fc cf       	rjmp	.-8      	; 0x3cc <RPI_send_char>
	UDR0 = msg;
 3d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3d8:	08 95       	ret

000003da <RPI_send_string>:
}

//	send a string to the rpi
void RPI_send_string(char msg[]){
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	8c 01       	movw	r16, r24
	//	variable to loop over the character array
	uint16_t index = 0;
 3e4:	c0 e0       	ldi	r28, 0x00	; 0
 3e6:	d0 e0       	ldi	r29, 0x00	; 0
	while(index < 64){
 3e8:	0c c0       	rjmp	.+24     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		//	reached end of the string
		if(msg[index] == '\0'){
 3ea:	f8 01       	movw	r30, r16
 3ec:	ec 0f       	add	r30, r28
 3ee:	fd 1f       	adc	r31, r29
 3f0:	80 81       	ld	r24, Z
 3f2:	81 11       	cpse	r24, r1
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <RPI_send_string+0x22>
			RPI_send_char(msg[index]);
 3f6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
			return;
 3fa:	06 c0       	rjmp	.+12     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		}
		
		RPI_send_char(msg[index]);
 3fc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <RPI_send_char>
		index++;
 400:	21 96       	adiw	r28, 0x01	; 1

//	send a string to the rpi
void RPI_send_string(char msg[]){
	//	variable to loop over the character array
	uint16_t index = 0;
	while(index < 64){
 402:	c0 34       	cpi	r28, 0x40	; 64
 404:	d1 05       	cpc	r29, r1
 406:	88 f3       	brcs	.-30     	; 0x3ea <RPI_send_string+0x10>
		}
		
		RPI_send_char(msg[index]);
		index++;
	}
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	08 95       	ret

00000412 <__tablejump2__>:
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	05 90       	lpm	r0, Z+
 418:	f4 91       	lpm	r31, Z
 41a:	e0 2d       	mov	r30, r0
 41c:	09 94       	ijmp

0000041e <__ultoa_ncheck>:
 41e:	bb 27       	eor	r27, r27

00000420 <__ultoa_common>:
 420:	fa 01       	movw	r30, r20
 422:	a6 2f       	mov	r26, r22
 424:	62 17       	cp	r22, r18
 426:	71 05       	cpc	r23, r1
 428:	81 05       	cpc	r24, r1
 42a:	91 05       	cpc	r25, r1
 42c:	33 0b       	sbc	r19, r19
 42e:	30 fb       	bst	r19, 0
 430:	66 f0       	brts	.+24     	; 0x44a <__ultoa_common+0x2a>
 432:	aa 27       	eor	r26, r26
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	88 1f       	adc	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	aa 1f       	adc	r26, r26
 43e:	a2 17       	cp	r26, r18
 440:	10 f0       	brcs	.+4      	; 0x446 <__ultoa_common+0x26>
 442:	a2 1b       	sub	r26, r18
 444:	63 95       	inc	r22
 446:	38 50       	subi	r19, 0x08	; 8
 448:	a9 f7       	brne	.-22     	; 0x434 <__ultoa_common+0x14>
 44a:	a0 5d       	subi	r26, 0xD0	; 208
 44c:	aa 33       	cpi	r26, 0x3A	; 58
 44e:	08 f0       	brcs	.+2      	; 0x452 <__ultoa_common+0x32>
 450:	a9 5d       	subi	r26, 0xD9	; 217
 452:	a1 93       	st	Z+, r26
 454:	36 f7       	brtc	.-52     	; 0x422 <__ultoa_common+0x2>
 456:	b1 11       	cpse	r27, r1
 458:	b1 93       	st	Z+, r27
 45a:	10 82       	st	Z, r1
 45c:	ca 01       	movw	r24, r20
 45e:	0c 94 31 02 	jmp	0x462	; 0x462 <strrev>

00000462 <strrev>:
 462:	dc 01       	movw	r26, r24
 464:	fc 01       	movw	r30, r24
 466:	67 2f       	mov	r22, r23
 468:	71 91       	ld	r23, Z+
 46a:	77 23       	and	r23, r23
 46c:	e1 f7       	brne	.-8      	; 0x466 <strrev+0x4>
 46e:	32 97       	sbiw	r30, 0x02	; 2
 470:	04 c0       	rjmp	.+8      	; 0x47a <strrev+0x18>
 472:	7c 91       	ld	r23, X
 474:	6d 93       	st	X+, r22
 476:	70 83       	st	Z, r23
 478:	62 91       	ld	r22, -Z
 47a:	ae 17       	cp	r26, r30
 47c:	bf 07       	cpc	r27, r31
 47e:	c8 f3       	brcs	.-14     	; 0x472 <strrev+0x10>
 480:	08 95       	ret

00000482 <_exit>:
 482:	f8 94       	cli

00000484 <__stop_program>:
 484:	ff cf       	rjmp	.-2      	; 0x484 <__stop_program>
